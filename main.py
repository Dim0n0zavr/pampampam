import sqlite3
import customtkinter as ctk
from tkinter import messagebox
import math
import random

ctk.set_appearance_mode("System")
ctk.set_default_color_theme("blue")
# c - cursor 
# –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤
INTERESTING_FACTS = [
    "–Ø–±–ª–æ–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è –ª—É—á—à–µ, —á–µ–º –∫–æ—Ñ–µ.",
    "–ë–∞–Ω–∞–Ω ‚Äî —ç—Ç–æ —è–≥–æ–¥–∞, –∞ –∫–ª—É–±–Ω–∏–∫–∞ ‚Äî –Ω–µ—Ç.",
    "–í–æ–¥–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–∫–æ–ª–æ 60% –≤–µ—Å–∞ —Ç–µ–ª–∞ –≤–∑—Ä–æ—Å–ª–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.",
    "–û—Ä–µ—Ö–∏ –±–æ–≥–∞—Ç—ã –ø–æ–ª–µ–∑–Ω—ã–º–∏ –∂–∏—Ä–∞–º–∏ –∏ –±–µ–ª–∫–∞–º–∏.",
    "–®–ø–∏–Ω–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ –∂–µ–ª–µ–∑–∞, —á–µ–º –º—è—Å–æ.",
    "–ê–≤–æ–∫–∞–¥–æ ‚Äî —ç—Ç–æ —Ñ—Ä—É–∫—Ç, –∞ –Ω–µ –æ–≤–æ—â.",
    "–ú–µ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è.",
    "–ß–µ—Å–Ω–æ–∫ –ø–æ–º–æ–≥–∞–µ—Ç —É–∫—Ä–µ–ø–∏—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç.",
    "–ú–æ—Ä–∫–æ–≤—å —É–ª—É—á—à–∞–µ—Ç –∑—Ä–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∏—Ç–∞–º–∏–Ω—É –ê.",
    "–ó–µ–ª–µ–Ω—ã–π —á–∞–π –±–æ–≥–∞—Ç –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–∞–º–∏.",
    "–ö–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –≤ –ê—Ñ—Ä–∏–∫–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–∏–Ω—É—Ç–∞!",
    'You were rickrolled'
]

class App(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("–†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –ø–∏—Ç–∞–Ω–∏—è")
        self.geometry("600x700")
        self.current_user = None
        self.show_main_menu()

    def clear_window(self):
        for widget in self.winfo_children():
            widget.destroy()

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–µ–≥–∞–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    def has_registered_users(self):
        conn = sqlite3.connect('nutrition.db')
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users")
        count = c.fetchone()[0]
        conn.close()
        return count > 0 # True False


    #==========–û—Å–Ω–æ–≤–Ω–æ–µ –ú–µ–Ω—é========== 

    def show_main_menu(self):
        self.clear_window()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        if not self.has_registered_users():
            login_btn_state = "disabled"
        else:
            login_btn_state = "normal"

        
        # –õ–æ–≥–æ—Ç–∏–ø
        self.logo_label = ctk.CTkLabel(self, text="üçé", font=("Arial", 50))
        self.logo_label.pack(pady=10)

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        self.welcome_label = ctk.CTkLabel(self, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", font=("Arial", 20, "bold"))
        self.welcome_label.pack(pady=10)

        # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = sqlite3.connect('nutrition.db')
        c = conn.cursor()
        c.execute("SELECT username FROM users")
        users = c.fetchall()
        conn.close()

        self.user_label = ctk.CTkLabel(self, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        self.user_label.pack(pady=5)

        self.user_var = ctk.StringVar(value=users[0][0] if users else "")
        self.user_menu = ctk.CTkOptionMenu(self, variable=self.user_var, values=[user[0] for user in users])
        self.user_menu.pack(pady=5)

        self.login_btn = ctk.CTkButton(self, text="–í–æ–π—Ç–∏", command=self.perform_login, state=login_btn_state)
        self.login_btn.pack(pady=10)

        self.register_btn = ctk.CTkButton(self, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", command=self.show_registration)
        self.register_btn.pack(pady=10)

        # –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
        self.fact_label = ctk.CTkLabel(self, text=random.choice(INTERESTING_FACTS), wraplength=500, justify="center")
        self.fact_label.pack(pady=20)

    def perform_login(self):
        self.current_user = self.user_var.get()
        self.show_user_menu()

    #==========–ú–µ–Ω—é —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏==========

    def show_registration(self):
        self.clear_window()

        # –õ–æ–≥–æ—Ç–∏–ø
        self.logo_label = ctk.CTkLabel(self, text="üçé", font=("Arial", 50))
        self.logo_label.pack(pady=10)
        
        # 1 —Å—Ç—Ä–æ—á–∫–∞
        self.name_age_frame = ctk.CTkFrame(self)
        self.name_age_frame.pack(pady=5)
        self.name_entry = ctk.CTkEntry(self.name_age_frame, placeholder_text="–ò–º—è", width=200)
        self.name_entry.pack(side="left", padx=5)
        self.age_entry = ctk.CTkEntry(self.name_age_frame, placeholder_text="–í–æ–∑—Ä–∞—Å—Ç", width=100)
        self.age_entry.pack(side="left", padx=5)

        # 2 —Å—Ç—Ä–æ—á–∫–∞
        self.weight_height_frame = ctk.CTkFrame(self)
        self.weight_height_frame.pack(pady=5)
        self.weight_entry = ctk.CTkEntry(self.weight_height_frame, placeholder_text="–í–µ—Å (–∫–≥)", width=150)
        self.weight_entry.pack(side="left", padx=5)
        self.height_entry = ctk.CTkEntry(self.weight_height_frame, placeholder_text="–†–æ—Å—Ç (—Å–º)", width=150)
        self.height_entry.pack(side="left", padx=5)

        # –ü–æ–ª
        self.gender_frame = ctk.CTkFrame(self)
        self.gender_frame.pack(pady=5)
        self.gender_label = ctk.CTkLabel(self.gender_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:")
        self.gender_label.pack(side="left", padx=5)
        self.gender_var = ctk.StringVar(value="–ú—É–∂—Å–∫–æ–π")
        self.gender_menu = ctk.CTkOptionMenu(self.gender_frame, variable=self.gender_var, values=["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–ë–æ–µ–≤–æ–π –≤–µ—Ä—Ç–æ–ª–µ—Ç"])
        self.gender_menu.pack(side="left", padx=5)

        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        self.activity_frame = ctk.CTkFrame(self)
        self.activity_frame.pack(pady=5)
        self.activity_label = ctk.CTkLabel(self.activity_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:")
        self.activity_label.pack(side="left", padx=5)
        self.activity_var = ctk.StringVar(value="–ú–∞–ª–æ–∞–∫—Ç–∏–≤–Ω—ã–π")
        self.activity_menu = ctk.CTkOptionMenu(self.activity_frame, variable=self.activity_var, 
                                             values=["–ú–∞–ª–æ–∞–∫—Ç–∏–≤–Ω—ã–π", "–°—Ä–µ–¥–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π", "–í—ã—Å–æ–∫–æ–∞–∫—Ç–∏–≤–Ω—ã–π"])
        self.activity_menu.pack(side="left", padx=5)

        # –¶–µ–ª—å
        self.goal_frame = ctk.CTkFrame(self)
        self.goal_frame.pack(pady=5)
        self.goal_label = ctk.CTkLabel(self.goal_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:")
        self.goal_label.pack(side="left", padx=5)
        self.goal_var = ctk.StringVar(value="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞")
        self.goal_menu = ctk.CTkOptionMenu(self.goal_frame, variable=self.goal_var, 
                                         values=["–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã", "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞"])
        self.goal_menu.pack(side="left", padx=5)

        # –ö–Ω–æ–ø–∫–∏
        self.register_confirm_btn = ctk.CTkButton(self, text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", command=self.perform_registration)
        self.register_confirm_btn.pack(pady=20)

        self.back_btn = ctk.CTkButton(self, text="–ù–∞–∑–∞–¥", command=self.show_main_menu)
        self.back_btn.pack(pady=10)

    #–†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–∫–∏–¥—ã–≤–∞–µ–º –≤ —é–∑–µ—Ä –º–µ–Ω—é

    def perform_registration(self):
        try:
            # –†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π
            activity_map = {
                "–ú–∞–ª–æ–∞–∫—Ç–∏–≤–Ω—ã–π": 1.2,
                "–°—Ä–µ–¥–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π": 1.55,
                "–í—ã—Å–æ–∫–æ–∞–∫—Ç–∏–≤–Ω—ã–π": 1.7
            }
            
            bmr = 0
            if self.gender_var.get() == "–ú—É–∂—Å–∫–æ–π":
                bmr = (88.362 + (13.397 * float(self.weight_entry.get())) + 
                      (4.799 * float(self.height_entry.get())) - 
                      (5.677 * float(self.age_entry.get()))) * activity_map[self.activity_var.get()]
            elif self.gender_var.get() == "–ë–æ–µ–≤–æ–π –≤–µ—Ä—Ç–æ–ª–µ—Ç":
                bmr = (88.362 + (13.397 * float(self.weight_entry.get())) + 
                      (4.799 * float(self.height_entry.get())) - 
                      (5.677 * float(self.age_entry.get()))) * activity_map[self.activity_var.get()]
            else:
                bmr = (447.593 + (9.247 * float(self.weight_entry.get())) + 
                      (3.098 * float(self.height_entry.get())) - 
                      (4.330 * float(self.age_entry.get()))) * activity_map[self.activity_var.get()]

            if self.goal_var.get() == "–ü–æ—Ö—É–¥–µ–Ω–∏–µ":
                bmr *= 0.8
            elif self.goal_var.get() == "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã":
                bmr *= 1.2

            conn = sqlite3.connect('nutrition.db')
            c = conn.cursor()
            c.execute('''INSERT INTO users (username, age, gender, weight, height, activity, goal, calories_norm)
                         VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
                      (self.name_entry.get().strip(),
                       int(self.age_entry.get()),
                       self.gender_var.get(),
                       float(self.weight_entry.get()),
                       float(self.height_entry.get()),
                       activity_map[self.activity_var.get()],
                       self.goal_var.get(),
                       math.floor(bmr)))
            conn.commit()
            conn.close()
            
            self.current_user = self.name_entry.get().strip()
            self.show_user_menu() # –ü–æ–∫–∞–∑ —é–∑–µ—Ä –º–µ–Ω
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {str(e)}")

    #==========–Æ–∑–µ—Ä –º–µ–Ω—é==========

    def show_user_menu(self):
        self.clear_window()
        
        conn = sqlite3.connect('nutrition.db')
        c = conn.cursor()
        c.execute("SELECT calories_norm FROM users WHERE username = ?", (self.current_user,))
        calories_norm = c.fetchone()[0]
        conn.close()

        # –õ–æ–≥–æ—Ç–∏–ø
        self.logo_label = ctk.CTkLabel(self, text="üçé", font=("Arial", 50))
        self.logo_label.pack(pady=10)

        # hello user 
        self.greeting_label = ctk.CTkLabel(self, text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {self.current_user}!", font=("Arial", 20, "bold"))
        self.greeting_label.pack(pady=20)

        self.calories_label = ctk.CTkLabel(self, text=f"–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calories_norm}")
        self.calories_label.pack(pady=10)

        self.plan_btn = ctk.CTkButton(self, text="–ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", command=self.create_meal_plan)
        self.plan_btn.pack(pady=10)

        self.logout_btn = ctk.CTkButton(self, text="–í—ã–π—Ç–∏", command=self.show_main_menu)
        self.logout_btn.pack(pady=10)

        # –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
        self.fact_label = ctk.CTkLabel(self, text=random.choice(INTERESTING_FACTS), wraplength=500, justify="center")
        self.fact_label.pack(pady=20)

    #==========–µ–¥–∞ –ø–ª–∞–Ω –¥–µ–ª–∞—Ç—å==========

    def create_meal_plan(self):
        self.clear_window()
        
        conn = sqlite3.connect('nutrition.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π
        c.execute("SELECT calories_norm FROM users WHERE username = ?", (self.current_user,))
        target_calories = c.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –±–ª—é–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        meals = {'–ó–∞–≤—Ç—Ä–∞–∫': [], '–û–±–µ–¥': [], '–£–∂–∏–Ω': []}
        for category in meals.keys():
            c.execute('''SELECT dishes.id, dishes.name, SUM((products.calories * dish_composition.grams)/100) as total_calories
                         FROM dishes
                         JOIN dish_composition ON dishes.id = dish_composition.dish_id
                         JOIN products ON dish_composition.product_id = products.id
                         WHERE dishes.category = ?
                         GROUP BY dishes.id''', (category,))
            meals[category] = c.fetchall()
        
        # –ü–æ–¥–±–æ—Ä –±–ª—é–¥–∞
        selected_meals = []
        total_calories = 0

        for category in ['–ó–∞–≤—Ç—Ä–∞–∫', '–û–±–µ–¥', '–£–∂–∏–Ω']:
            if meals[category]:
                random.shuffle(meals[category])  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –±–ª—é–¥–∞
                for meal in meals[category]:
                    if total_calories + meal[2] <= target_calories:
                        selected_meals.append((category, meal[1], meal[2]))
                        total_calories += meal[2]
                        if category == '–û–±–µ–¥' and len([m for m in selected_meals if m[0] == '–û–±–µ–¥']) < 2:
                            continue  # 2 —à—Ç—É–∫–∏ –Ω–∞ –æ–±–µ–¥
                        break

        remaining_calories = target_calories - total_calories
        if remaining_calories > 0:   
            all_meals = []
            for category in meals.keys():
                all_meals.extend(meals[category])

            available_meals = [meal for meal in all_meals if meal[2] <= remaining_calories]

            print('1', available_meals)
        
            while remaining_calories > 0 and available_meals:

                random.shuffle(available_meals)
                meal = available_meals.pop() # meal = (id, name, calories)

                if meal[2] <= remaining_calories:
                    selected_meals.append(('–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–∞–º–∏', meal[1], meal[2]))
                    total_calories += meal[2]
                    remaining_calories -= meal[2]                 




        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        if total_calories == 0:
            self.plan_label = ctk.CTkLabel(self, text="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞")
            self.plan_label.pack(pady=20)
        else:
            self.plan_label = ctk.CTkLabel(self, text=f"–ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø–ª–∞–Ω (–≤—Å–µ–≥–æ –∫–∞–ª–æ—Ä–∏–π: {total_calories:.0f} –∏–∑ {target_calories})", font=("Arial", 16, "bold"))
            self.plan_label.pack(pady=20)
            
            for category in ['–ó–∞–≤—Ç—Ä–∞–∫', '–û–±–µ–¥', '–£–∂–∏–Ω', '–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–∞–º–∏']:
                category_meals = [m for m in selected_meals if m[0] == category]
                if category_meals:
                    # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –æ–±–≤–æ–¥–∫–æ–π
                    category_frame = ctk.CTkFrame(
                        self, 
                        border_width=2,  # –¢–æ–ª—â–∏–Ω–∞ –æ–±–≤–æ–¥–∫–∏
                        border_color="#2CC985",  # –¶–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏
                        corner_radius=10  # –ó–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤
                    )
                    category_frame.pack(pady=10, padx=20, fill="x")

                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    category_label = ctk.CTkLabel(
                        category_frame, 
                        text=f"{category}:", 
                        font=("Arial", 14, "bold")
                    )
                    category_label.pack(pady=5, padx=10, anchor="w")

                    # –°–ø–∏—Å–æ–∫ –±–ª—é–¥
                    for meal in category_meals:
                        meal_label = ctk.CTkLabel(
                            category_frame, 
                            text=f"- {meal[1]} ({meal[2]:.0f} –∫–∫–∞–ª)", 
                            font=("Arial", 12)
                        )
                        meal_label.pack(pady=2, padx=20, anchor="w")
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        self.back_btn = ctk.CTkButton(
            self, 
            text="–ù–∞–∑–∞–¥", 
            command=self.show_user_menu,
            fg_color="#2CC985",  # –¶–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
            hover_color="#1E7D5B"  # –¶–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        )
        self.back_btn.pack(pady=20)
        
        conn.close()


if __name__ == "__main__":
    app = App()
    app.mainloop()